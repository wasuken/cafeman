// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ユーザー情報（既存）
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 既存リレーション
  coffeeRecords   CoffeeRecord[]
  coffeeSettings  CoffeeSettings?

  // 🆕 SNS機能リレーション
  profile         UserProfile?
  posts           Post[]
  likes           Like[]
  comments        Comment[]
  notifications   Notification[]
  // フォロー関係
  following       Follow[] @relation("UserFollowing")
  followers       Follow[] @relation("UserFollowers")

  @@map("users")
}

// 🆕 ユーザープロフィール拡張
model UserProfile {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  bio       String?  @db.Text
  avatarUrl String?
  website   String?
  location  String?
  birthDate DateTime?
  isPublic  Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// 🆕 投稿
model Post {
  id        Int      @id @default(autoincrement())
  userId    String
  content   String   @db.Text
  imageUrl  String?
  hashtags  Json?    // ["coffee", "morning"] 形式
  isPublic  Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  comments  Comment[]

  // インデックス
  @@index([userId])
  @@index([createdAt])
  @@map("posts")
}

// 🆕 いいね
model Like {
  id     Int    @id @default(autoincrement())
  postId Int
  userId String
  
  createdAt DateTime @default(now())

  // リレーション
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 重複防止
  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@map("likes")
}

// 🆕 コメント
model Comment {
  id      Int    @id @default(autoincrement())
  postId  Int
  userId  String
  content String @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // インデックス
  @@index([postId])
  @@index([userId])
  @@map("comments")
}

// 🆕 フォロー関係
model Follow {
  id          Int    @id @default(autoincrement())
  followerId  String // フォローする人
  followingId String // フォローされる人
  
  createdAt DateTime @default(now())

  // リレーション
  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  // 重複防止・自分自身のフォロー防止はアプリケーション側で制御
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

// 🆕 通知
model Notification {
  id        Int     @id @default(autoincrement())
  userId    String  // 通知を受け取るユーザー
  type      String  // "like", "comment", "follow", "mention"
  title     String
  message   String  @db.Text
  relatedId Int?    // 関連するポストIDなど
  isRead    Boolean @default(false)
  
  createdAt DateTime @default(now())

  // リレーション
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // インデックス
  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

// 既存のコーヒー関連テーブル（変更なし）
model CoffeeRecord {
  id        Int      @id @default(autoincrement())
  userId    String   @default("default-user")
  date      DateTime
  cups      Int      @default(1)
  timestamp DateTime
  
  coffeeType String?
  size       String?
  location   String?
  notes      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date, timestamp])
  @@index([timestamp])
  @@map("coffee_records")
}

model CoffeeSettings {
  id     Int    @id @default(autoincrement())
  userId String @unique

  dailyLimit        Int @default(4)
  warningThreshold  Int @default(3)
  minInterval       Int @default(240)
  cutoffTime        String @default("18:00")
  enableNotifications Boolean @default(true)
  enableWarnings      Boolean @default(true)
  defaultView       String @default("calendar")
  weekStartsOn      Int    @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("coffee_settings")
}

model CoffeeType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  caffeine    Int?
  description String?
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coffee_types")
}

model CoffeeStats {
  id       Int    @id @default(autoincrement())
  userId   String
  period   String
  date     DateTime
  
  totalCups     Int @default(0)
  avgCups       Float @default(0)
  maxCups       Int @default(0)
  activeDays    Int @default(0)
  breakdown Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, period, date])
  @@index([userId, period])
  @@map("coffee_stats")
}

model CoffeeGoal {
  id      Int    @id @default(autoincrement())
  userId  String
  
  type        String
  targetCups  Int?
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean @default(true)
  isAchieved  Boolean @default(false)
  title       String?
  description String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isActive])
  @@map("coffee_goals")
}
